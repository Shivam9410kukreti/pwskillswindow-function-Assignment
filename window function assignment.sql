-- QUE 1) Rank the customers based on the total amount they have spent on rentals --

SELECT * from customer;
SELECT * from payment;
SELECT c.first_name , c.last_name , SUM(p.amount) as Total_amount , 
rank() over (order by SUM(p.amount) asc) as ranking
FROM customer c 
  INNER JOIN
Payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;



-- Calculate the cumulative revenue generated by each film over time --

SELECT f.film_id , f.title ,  amount as revenue , rental_date ,
SUM(amount) over(partition by film_id order by rental_date) as cumultaive_revenue
FROM film f
       INNER JOIN  
inventory i ON f.film_id = i.film_id
      INNER JOIN 
rental r ON i.inventory_id = r.inventory_id
      INNER JOIN 
payment p ON r.rental_id = p.rental_id
ORDER BY film_id asc;



-- Determine the average rental duration for each film, considering films with similar lengths --

SELECT film_id , title , rental_duration ,
avg(rental_duration) over (partition by film_id order by length(length)) as Same_length
FROM film;



 -- Identify the top 3 films in each category based on their rental counts --

with ranked_films as (
 SELECT f.film_id , f.title , c.name as category ,
 count(rental_id) as rental_count , 
 ROW_NUMBER() over (partition by c.name order by count(r.rental_id)) As ranking
 From film f
       INNER JOIN 
film_category fc ON f.film_id = fc.film_id
      INNER JOIN 
category c ON fc.category_id = c.category_id
      INNER JOIN 
inventory i ON fc.film_id = i.film_id
      INNER JOIN 
rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id , f.title , category
)
SELECT film_id , title , category , rental_count 
FROM 
  ranked_films
WHERE
 ranking <= 3
ORDER by category , ranking;


 
 -- Calculate the difference in rental counts between each customers total rentals and the average rentals across all customers --
 
 SELECT customer_id , total_rental, 
      AVG(total_rental) over() As avg_rentals,
      total_rental - avg(total_rental) over () As difference_rental
FROM (SELECT
         c.customer_id , 
         COUNT(r.rental_id) As total_rental
FROM
 customer c 
       INNER JOIN 
 rental r ON  c.customer_id = r.customer_id
 GROUP BY c.customer_id ) as b;

 
 -- Find the monthly revenue trend for the entire rental store over time --

SELECT DATE_FORMAT(payment_date ,'%d-%m-%y')As month,
 sum(amount) as monthly_revenue ,
 sum(SUM(amount)) over (order by DATE_FORMAT(payment_date ,'%d-%m-%y')) As revenue
FROM 
    payment
GROUP BY 
    DATE_FORMAT(payment_date ,'%d-%m-%y');
 
 

-- Identify the customers whose total spending on rentals falls within the top 20% of all customers -- 

select customer_id  , total_spendings , perct_rank  
FROM (select customer_id , sum(amount) as total_spendings ,
PERCENT_RANK() OVER (ORDER BY SUM(amount)) AS perct_rank
FROM 
  payment 
  GROUP BY 
        customer_id 
) AS customer_spending
WHERE 
    perct_rank <= 20;



-- Calculate the running total of rentals per category, ordered by rental count -- 
 
with rental_category as (
SELECT c.name as category ,
 count(r.rental_id) as rental_counts , 
 ROW_NUMBER() over (order by count(r.rental_id)) As ranking
 From film f
       INNER JOIN 
film_category fc ON f.film_id = fc.film_id
      INNER JOIN 
category c ON fc.category_id = c.category_id
      INNER JOIN 
inventory i ON fc.film_id = i.film_id
      INNER JOIN 
rental r ON i.inventory_id = r.inventory_id
GROUP BY  category)
SELECT  category , rental_counts ,
sum(rental_counts) over (order by ranking) As running_totals
FROM 
  rental_category
ORDER by rental_counts;
 
 
 
-- Find the films that have been rented less than the average rental count for their respective categories --

with rental_less as (
select f.film_id , f.title , c.name as category ,
count(r.rental_id) as rental_counts , 
 avg(count(r.rental_id)) over (order by count(r.rental_id)) As ranking
 From film f
       INNER JOIN 
film_category fc ON f.film_id = fc.film_id
      INNER JOIN 
category c ON fc.category_id = c.category_id
      INNER JOIN 
inventory i ON fc.film_id = i.film_id
      INNER JOIN 
rental r ON i.inventory_id = r.inventory_id
GROUP BY film_id, category)
SELECT film_id , title , category , rental_counts ,
avg(rental_counts) over (order by ranking) As running_totals
FROM 
  rental_less
ORDER by rental_counts desc;



-- Identify the top 5 months with the highest revenue and display the revenue generated in each month --

select MONTHNAME(payment_date) AS Month,
year(payment_date) As year, 
SUM(amount) As Revenue
FROM 
   payment
GROUP BY 
 monthname(payment_date) , year(payment_date) 
   order by revenue desc;


